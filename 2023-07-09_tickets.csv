fields.assignee.displayName,fields.created,fields.updated,id,self,key,fields.parent.id,fields.status.name,fields.issuetype.name,fields.status.statusCategory.id,fields.summary,fields.description
Kenneth Ruan,2023-07-01T11:18:32.508-0700,2023-07-01T11:20:46.656-0700,21057,https://uwmidsun.atlassian.net/rest/api/2/issue/21057,STRAT15-186,20998,In Progress,Story,4,GraphQL Gateway,"[~accountid:612f6e2edae0a20071906f7a] [~accountid:63113f0bea661fd37d4f322a] 

Joint-project.

We are building out an GraphQL DB Gateway to allow our mysql db to interact with our:

# Microservices (DB must be able to insert data from our microservices)
# Dashboard (fastAPI must be able to retrieve data)"
Gustavo Ayub Ungaretti,2023-06-24T11:48:43.348-0700,2023-07-03T13:43:31.043-0700,21052,https://uwmidsun.atlassian.net/rest/api/2/issue/21052,STRAT15-185,21050,In Progress,Subtask,4,Jira Automation Proposal,"Under _Project Overviews/Jira Automation,_ create a project proposal for any application of the Jira Automation toolkit. 

* Scope
* Timeline
* User Stories
* Product Description
** Examples
*** A distributed email with our velocity to our subscribers
*** Dashboard for visualization 
**** Burn-down charts, timeline progressions, Ranking of ticket priorities or individual member velocity.
*** Organized notebook that we can leverage on our weekly general meetings.

Our main use-cases involve:

* Analyzing, gathering, and identifying stale tickets.
* Understanding our task completion and velocity.
* Algorithm to determine ticket re-assignment. "
Elizabeth Taranenko,2023-06-23T18:20:34.586-0700,2023-07-03T13:43:28.796-0700,21051,https://uwmidsun.atlassian.net/rest/api/2/issue/21051,STRAT15-184,21050,Done,Subtask,3,SPIKE: Investigate Jira API,"Research and determine feasibility regarding the Jira API and its integration with our workspace.

# Recommend a Jupyter Notebook to test the API and determine the feasibility of calling the API.
# Consult with Rodrigo for access-issues. 
# Feel free to use the Confluence space to document your API findings."
Elizabeth Taranenko,2023-06-23T18:16:16.088-0700,2023-06-24T11:36:03.033-0700,21050,https://uwmidsun.atlassian.net/rest/api/2/issue/21050,STRAT15-183,20681,In Progress,Story,4,Jira Automation,"Problem Statement:

* With our current Jira tickets and assignee’s it is difficult to keep track of “ticket activity” or ticket staleness. We need a tool that will help us determine which tickets are stale or inactive, so that we can re-assign or check-in."
Nathaniel Gong Li,2023-05-31T18:31:38.630-0700,2023-05-31T18:35:07.887-0700,21049,https://uwmidsun.atlassian.net/rest/api/2/issue/21049,STRAT15-182,21010,In Progress,Subtask,4,Familiarize yourself with Flask and the ETA code,"# Familiarize yourself with Flask functionality and the Flask template provided: [https://github.com/uw-midsun/strategy-flask-template|https://github.com/uw-midsun/strategy-flask-template|smart-link] 
# Pull the code from strategy_xv and familiarize yourself with eta.py. The goal is to have a full understanding of the code.
# Pull down the Flask template into a repository on your local machine. Integrate the eta.py code into this template. Present your findings or MVP to the group.



Ask Kenneth Ruan for any questions with the ETA code."
Riddhiman Paul,2023-05-27T13:46:01.331-0700,2023-05-27T13:52:44.907-0700,21048,https://uwmidsun.atlassian.net/rest/api/2/issue/21048,STRAT15-181,21005,In Progress,Subtask,4,"Connect with Kenneth, Explore Existing Code, and Familiarize with Flask Template","# Explore the existing code on the strategy_xv repository. This will help you get familiar with the function calls. Try to do before meeting with Kenneth.
# Connect with Kenneth! He will give you a good idea of his weather model and how to migrate to being a microservice.
# Familiarize yourself with the Flask template. 
# EXTRA: Pull the flask template down into a local repo. Do the same with the victini_microservices repo. Create a folder in the victini_microservices repo called weather. Add the flask template to the weather folder in the victini_microservices repo and PR. This will be your working directory."
Jason D'Souza,2023-05-27T13:22:03.440-0700,2023-06-10T11:40:33.994-0700,21047,https://uwmidsun.atlassian.net/rest/api/2/issue/21047,STRAT15-180,20677,In Progress,Story,4,Implement a FastAPI Framework,"# Create a folder for the server in the dashboard repository.
# Create the basic infrastructure for a FastAPI server. Follow good-practices when it comes to the file set-up.
# Set-up sample database locally on mysql. 
# Generate sample database, tables and data.
# Test the FastAPI with the mysql server.
# Once you’ve tested, push the FastAPI code, without your mysql db connection details of course.
# Once our team has set-up the database, (probably next week), we will hook the database connection up with the server. "
Stephanie Li,2023-05-27T13:15:46.215-0700,2023-05-31T15:26:59.336-0700,21046,https://uwmidsun.atlassian.net/rest/api/2/issue/21046,STRAT15-179,20677,In Progress,Story,4,Route Model Dashboard Preliminary Design,"Design, with Figma, the dashboard layout for the Route model currently collected.



Using Figma, we’re able to create animations within a file, so I’ve designed the route model dashboard design in the same file as the dashboard home page.

[https://www.figma.com/file/TccjbqECefrFEdgQD0b4sq/Dashboard?type=design&node-id=0%3A1&t=TLggegaloMbfSJ7Z-1|https://www.figma.com/file/TccjbqECefrFEdgQD0b4sq/Dashboard?type=design&node-id=0%3A1&t=TLggegaloMbfSJ7Z-1|smart-link] 

I believe we can also embed the Figma designs into the code itself? It says “Get embed code.”

!image-20230531-222642.png|width=482,height=385!



[https://github.com/uw-midsun/strategy_xv/blob/ca40a30fab311cba9e1c637312a31ada6531efed/routemodelv2/sample_route_step4.csv|https://github.com/uw-midsun/strategy_xv/blob/ca40a30fab311cba9e1c637312a31ada6531efed/routemodelv2/sample_route_step4.csv|smart-link] "
Ren Jie Zheng,2023-05-27T12:25:36.694-0700,2023-06-25T12:02:27.549-0700,21045,https://uwmidsun.atlassian.net/rest/api/2/issue/21045,STRAT15-178,20677,Done,Story,3,Introduce CoreUI to React App,"# Set-up a React repository on [uw-midsun|https://github.com/uw-midsun]/[*strategy_dashboard*|https://github.com/uw-midsun/strategy_dashboard] with create-react-app
# Introduce CoreUI to the repo
# Build landing, routing, and initial “frame” components.
# Set-up 3-4 mock-up graphs with CoreUI with sample data. Could be any data preferably geographic data.
# Create a side-bar component.
# Explore graphing library integration with CoreUI."
Stephanie Li,2023-05-14T11:16:38.928-0700,2023-05-28T13:52:02.617-0700,21042,https://uwmidsun.atlassian.net/rest/api/2/issue/21042,STRAT15-177,20677,In Progress,Story,4,Frame Design,"We are looking to design the Landing page or the Home page of the dashboard. 

[https://www.figma.com/file/TccjbqECefrFEdgQD0b4sq/Dashboard?type=design&node-id=0%3A1&t=P8i4vfmN9DOr1C8T-1|https://www.figma.com/file/TccjbqECefrFEdgQD0b4sq/Dashboard?type=design&node-id=0%3A1&t=P8i4vfmN9DOr1C8T-1|smart-link]"
,2023-05-14T10:58:28.496-0700,2023-05-14T10:58:28.808-0700,21041,https://uwmidsun.atlassian.net/rest/api/2/issue/21041,STRAT15-176,20879,To Do,Story,2,Tools? Mocking?,
Athithiya Mohanakumar,2023-05-13T11:17:11.696-0700,2023-06-15T18:04:11.143-0700,21039,https://uwmidsun.atlassian.net/rest/api/2/issue/21039,STRAT15-174,20679,In Progress,Story,4,SPIKE: Set up elevation api server,"[https://www.opentopodata.org/|https://www.opentopodata.org/|smart-link]

Investigative Story - Hitting TOPO Data for API Elevation Data

# Create a Python file in [https://github.com/uw-midsun/strategy_xv/tree/main/routemodelv2/elevations|https://github.com/uw-midsun/strategy_xv/tree/main/routemodelv2/elevations|smart-link] directory.
# Set-up Python environment with a virtual env and requirements.txt.
# Explore the API.
## Data available
## Data formats
## Data endpoints
## Coordinate compatibility.
# With the coordinate CSV attached, read in the coordinates, and create a DataFrame that has elevation data available for each coordinate piece. Append the coordinate data to the Dataframe for each coordinate.
# Extract the resulting dataframe as a CSV. 

Present findings to group!"
,2023-05-13T11:11:25.295-0700,2023-06-15T17:48:32.805-0700,21038,https://uwmidsun.atlassian.net/rest/api/2/issue/21038,STRAT15-173,20780,Done,Story,3,Create database instance on cloud,
Ryan Lam,2023-04-09T00:10:07.755-0700,2023-07-01T11:17:56.151-0700,21037,https://uwmidsun.atlassian.net/rest/api/2/issue/21037,STRAT15-172,20998,In Progress,Story,4,Static RouteData,"Isabelle adding features to it. Core code is complete.

[~accountid:63113ec28473817d7d04b426] "
,2023-03-25T10:29:21.561-0700,2023-04-02T11:23:22.274-0700,21029,https://uwmidsun.atlassian.net/rest/api/2/issue/21029,STRAT15-171,21003,Done,Subtask,3,Set up dummy database for devs,
,2023-03-25T09:42:44.538-0700,2023-04-01T10:44:21.937-0700,21026,https://uwmidsun.atlassian.net/rest/api/2/issue/21026,STRAT15-168,21003,Done,Subtask,3,New onboarding process,
,2023-03-25T09:42:04.944-0700,2023-04-02T11:23:29.801-0700,21025,https://uwmidsun.atlassian.net/rest/api/2/issue/21025,STRAT15-167,21003,Done,Subtask,3,Basic dev env setup (software/tools),
,2023-03-25T09:31:59.576-0700,2023-04-07T19:42:49.483-0700,21024,https://uwmidsun.atlassian.net/rest/api/2/issue/21024,STRAT15-166,20998,To Do,Story,2,Background workers,"* {color:#ff5630}*Determine what background workers we need*{color} (what we’re going to have as the core microservices and what we’re going to have as background workers) → {color:#ffbdad}schedule meeting{color}, do other teams need background workers?"
,2023-03-25T09:30:43.472-0700,2023-04-01T21:11:15.471-0700,21021,https://uwmidsun.atlassian.net/rest/api/2/issue/21021,STRAT15-163,21003,In Progress,Subtask,4,Dev enviornment set up (for microservice dev),
,2023-03-25T09:30:31.498-0700,2023-04-02T00:56:24.661-0700,21020,https://uwmidsun.atlassian.net/rest/api/2/issue/21020,STRAT15-162,21003,To Do,Subtask,2,Docker setup (for microservices),
,2023-03-25T09:30:06.449-0700,2023-03-25T09:30:17.277-0700,21019,https://uwmidsun.atlassian.net/rest/api/2/issue/21019,STRAT15-161,21001,To Do,Subtask,2,Connect to Microservices,* Set up microservices to listen to the data streams (and get the data they need) + have Kafka sending the data
,2023-03-25T09:29:40.645-0700,2023-03-25T09:29:46.666-0700,21018,https://uwmidsun.atlassian.net/rest/api/2/issue/21018,STRAT15-160,21001,To Do,Subtask,2,Data streaming,* Determine how to stream the data (does every microservice get the same data sent to them?)
Prabhav Khera,2023-03-25T09:28:37.823-0700,2023-07-02T22:07:30.265-0700,21017,https://uwmidsun.atlassian.net/rest/api/2/issue/21017,STRAT15-159,21001,Done,Subtask,3,Connect to historical car database,"* Connect Kafka to our historical car database (see above) and figure out how to use it for [Capture Data Change|https://hevodata.com/learn/kafka-cdc/#:~:text=Change%20Data%20Capture%20(CDC)%20is,and%20update%20a%20search%20index.]"
,2023-03-25T09:27:02.632-0700,2023-03-25T09:27:14.107-0700,21016,https://uwmidsun.atlassian.net/rest/api/2/issue/21016,STRAT15-158,21000,To Do,Subtask,2,Database security,"Security → Shouldn’t be accessible from a random person, setup so our services can read/write data"
Prabhav Khera,2023-03-25T09:26:46.305-0700,2023-07-02T22:07:51.468-0700,21015,https://uwmidsun.atlassian.net/rest/api/2/issue/21015,STRAT15-157,21000,Done,Subtask,3,Set up the database ,
,2023-03-25T09:26:34.389-0700,2023-03-25T09:26:34.839-0700,21014,https://uwmidsun.atlassian.net/rest/api/2/issue/21014,STRAT15-156,21000,To Do,Subtask,2,Determine the schema of the database,
,2023-03-25T09:26:05.651-0700,2023-03-25T09:26:12.465-0700,21013,https://uwmidsun.atlassian.net/rest/api/2/issue/21013,STRAT15-155,20999,To Do,Subtask,2,Add data to database,
,2023-03-25T09:25:39.768-0700,2023-03-25T09:25:50.541-0700,21012,https://uwmidsun.atlassian.net/rest/api/2/issue/21012,STRAT15-154,20999,To Do,Subtask,2,Map real-time location to route,"* The location data needs to be mapped to our route → our route is represented by 1000s of (lat, long) points that connect to represent a route. The location data from the car will not exactly match the location points of our route so we need to figure out which of our route’s location point the car is nearest to (because this will be where the car is “at” in our route). A problem that we have is that the route may cross over itself and we don’t know which direction it’s going (as that is needed for other microservices). One option is to use the sliding window technique but the problem is that the route is 1000s of points and the microservice is stateless. We need to figure out an algorithm for this (or design the service in another way)"
Rodrigo Tiscareno,2023-03-25T09:25:00.385-0700,2023-07-01T11:09:10.646-0700,21011,https://uwmidsun.atlassian.net/rest/api/2/issue/21011,STRAT15-153,20999,In Progress,Subtask,4,Create basic server,"* Create a microservice that will listen to HTTP requests from the car which will contain the car’s location (lat, long) and other raw data (time, sensor data, etc.). The microservice will respond with an OK response to the client but the response will have no data"
Nathaniel Gong Li,2023-03-25T09:23:18.913-0700,2023-06-05T15:50:41.915-0700,21010,https://uwmidsun.atlassian.net/rest/api/2/issue/21010,STRAT15-152,21004,In Progress,Story,4,ETA,"* Learn about Flask and REST APIs
* Take a look at [https://github.com/uw-midsun/strategy-flask-template/tree/main|https://github.com/uw-midsun/strategy-flask-template/tree/main|smart-link] 
* Create a branch on [https://github.com/uw-midsun/victini-microservices|https://github.com/uw-midsun/victini-microservices|smart-link] and pull over the ETA and Flask code
* Build out endpoints for APIs"
Rodrigo Tiscareno,2023-03-25T09:23:14.576-0700,2023-07-01T11:21:54.666-0700,21009,https://uwmidsun.atlassian.net/rest/api/2/issue/21009,STRAT15-151,21004,In Progress,Story,4,Solar Irradiance,Work with Anh and her code and see if migration to micro-service is possible. 
,2023-03-25T09:23:09.427-0700,2023-03-25T09:23:09.740-0700,21008,https://uwmidsun.atlassian.net/rest/api/2/issue/21008,STRAT15-150,21004,To Do,Story,2,Coulomb Counting,
,2023-03-25T09:23:02.744-0700,2023-03-25T09:23:02.997-0700,21007,https://uwmidsun.atlassian.net/rest/api/2/issue/21007,STRAT15-149,21004,To Do,Story,2,Live loop,
,2023-03-25T09:22:54.767-0700,2023-03-25T09:22:55.178-0700,21006,https://uwmidsun.atlassian.net/rest/api/2/issue/21006,STRAT15-148,21004,To Do,Story,2,Optimization,
Riddhiman Paul,2023-03-25T09:22:49.596-0700,2023-05-27T13:45:33.172-0700,21005,https://uwmidsun.atlassian.net/rest/api/2/issue/21005,STRAT15-147,21004,In Progress,Story,4,Weather,"Work with Kenneth to migrate the _get_weather.py_ code from strategy_xv into a microservice.

The microservice should:

* Incorporate the Flask server: [https://github.com/uw-midsun/strategy-flask-template/tree/main/src|https://github.com/uw-midsun/strategy-flask-template/tree/main/src|smart-link] 
* Request data at a time interval pre-determined by the team or by your judgement.
* When the database is online, insert weather data into a created table. 
* Because weather data will probably require internet connection, add code to only call the API when it is available. "
,2023-03-25T09:21:25.991-0700,2023-04-02T08:35:13.953-0700,21004,https://uwmidsun.atlassian.net/rest/api/2/issue/21004,STRAT15-146,,To Do,Epic,2,Victini - Microservices,[https://github.com/uw-midsun/victini-microservices|https://github.com/uw-midsun/victini-microservices|smart-link] 
Ryan Lam,2023-03-25T09:21:02.791-0700,2023-07-01T11:16:45.136-0700,21003,https://uwmidsun.atlassian.net/rest/api/2/issue/21003,STRAT15-145,20998,To Do,Story,2,Cloud services + DevOps,Dependent on other projects . 🙂 
Prabhav Khera,2023-03-25T09:19:25.866-0700,2023-03-26T14:41:08.123-0700,21001,https://uwmidsun.atlassian.net/rest/api/2/issue/21001,STRAT15-143,20998,In Progress,Story,4,Kinesis event streaming,It still says kafka cuz it’s outdated and I’m too lazy to change it
Prabhav Khera,2023-03-25T09:19:17.784-0700,2023-06-30T11:08:03.000-0700,21000,https://uwmidsun.atlassian.net/rest/api/2/issue/21000,STRAT15-142,20998,In Progress,Story,4,Historical car database,Setting up MongoDB and using change_streams from MongoDB to stream real-time changes.
Rodrigo Tiscareno,2023-03-25T09:19:08.568-0700,2023-07-01T11:09:04.377-0700,20999,https://uwmidsun.atlassian.net/rest/api/2/issue/20999,STRAT15-141,20998,In Progress,Story,4,Location service,"* The car (client) sends an HTTP request every _x_ seconds to the location service with data such as time, location (latitude, longitude), velocity, electrical measurements, etc.
* The location service maps the car’s location to its nearest coordinate that exists in our database
* The location service inserts the raw data and mapped coordinates to a database that (only) stores the historical location/data of the car (which is just raw data)"
,2023-03-25T09:17:57.539-0700,2023-04-02T08:35:01.722-0700,20998,https://uwmidsun.atlassian.net/rest/api/2/issue/20998,STRAT15-140,,To Do,Epic,2,Victini - Core,[https://github.com/uw-midsun/victini-core|https://github.com/uw-midsun/victini-core|smart-link] 
Jason D'Souza,2023-03-18T15:53:22.190-0700,2023-05-14T10:51:50.200-0700,20996,https://uwmidsun.atlassian.net/rest/api/2/issue/20996,STRAT15-139,20677,To Do,Task,2,Integrate Map View into Dash App [SPIKE],"*Problem:*  Currently, there is no map in our Dash App, we need to implement one. 

*Approach:* Using the current StreamLit branch, implement a map that displays a car along a certain route. If you can’t do that, do it in Dash. 

* The map should contain:
** Car icon
** Datapoints along the route
** Embed the Map into our current 
* Run wsgi.py and test_routes.py in the current dash app. This is on the schedule_graphs branch"
,2023-03-18T15:50:42.084-0700,2023-05-14T10:51:02.208-0700,20995,https://uwmidsun.atlassian.net/rest/api/2/issue/20995,STRAT15-138,20677,To Do,Task,2,Implement Plotly Socket Extension ,
Prabhav Khera,2023-02-22T22:57:36.821-0800,2023-03-17T17:25:06.009-0700,20983,https://uwmidsun.atlassian.net/rest/api/2/issue/20983,STRAT15-137,20938,In Progress,Subtask,4,In person meetup to build basic script and test with arduino,
Prabhav Khera,2023-02-22T22:57:11.539-0800,2023-03-17T17:25:00.028-0700,20982,https://uwmidsun.atlassian.net/rest/api/2/issue/20982,STRAT15-136,20938,Done,Subtask,3,Gather equipment for in-person meetup,
Jason D'Souza,2023-02-15T18:34:18.751-0800,2023-02-21T18:02:13.904-0800,20978,https://uwmidsun.atlassian.net/rest/api/2/issue/20978,STRAT15-133,20908,Done,Subtask,3,API Libraries for Routing Map,"Research and compare the different types of possible libraries/frameworks to map out the routemodel.

Would be used for a future dashboard for the car, etc.

See the following confluence for the planning for the last car.

[https://uwmidsun.atlassian.net/wiki/spaces/S/pages/2067824911/Routemodel+Graphical+User+Interface+GUI|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/2067824911/Routemodel+Graphical+User+Interface+GUI|smart-link]"
Jason D'Souza,2023-02-15T18:30:53.072-0800,2023-07-08T12:16:03.153-0700,20977,https://uwmidsun.atlassian.net/rest/api/2/issue/20977,STRAT15-132,20908,Done,Subtask,3,Route Model Leaflet Proof of Concept,"We want to be able to prove that Leaflet is a viable mapping library for our route model. 



Leveraging the Leaflet JS or Python library, create a folder in our RouteModel directory called “graphics” and create simple markers for every *polyline_point_index* point in the [https://github.com/uw-midsun/strategy_xv/blob/e73260cfce1bb35216486057d1d7de87ebe8bc9c/routemodelv2/sample_route_step4.csv|https://github.com/uw-midsun/strategy_xv/blob/e73260cfce1bb35216486057d1d7de87ebe8bc9c/routemodelv2/sample_route_step4.csv|smart-link] using the point’s latitude and longitude. Create a simple interface to be able to scroll through the map with ease.

The next steps would be a simple program to calculate the expected ETA to the next checkpoint given an average speed, but let’s start with the simple marker graphic first 🙂"
Steven Li,2023-01-28T12:30:03.529-0800,2023-02-05T09:37:48.598-0800,20969,https://uwmidsun.atlassian.net/rest/api/2/issue/20969,STRAT15-131,20968,In-Review,Subtask,4,CSV to Plotly ,"Create a CRON job to automate the transfer of data from the raw *sample_route_step4.csv* to a simple GUI with Plotly graphs.

Start with simple to complex scheduling libraries. APScheduler, Cron-Python, and CRON scheduling. 

 MVP: Basic pipeline that transfers from CSV to Plotly graphs on a scheduled, ASYNC method preferred. "
Steven Li,2023-01-28T12:28:28.566-0800,2023-05-14T10:29:41.700-0700,20968,https://uwmidsun.atlassian.net/rest/api/2/issue/20968,STRAT15-130,20679,Done,Story,3,SPIKE: Scheduling CRON Jobs,
Kenneth Ruan,2023-01-28T10:50:37.055-0800,2023-05-13T11:28:06.277-0700,20966,https://uwmidsun.atlassian.net/rest/api/2/issue/20966,STRAT15-128,20679,To Do,Story,2,Weather Model Connectivity [MIGRATION],"Connect the current weather data API to the schema we defined in our last meeting. Be able to retrieve data for x kilometer intervals. Leverage the ETA checkpoint idea in ETA.py. 

Target schema: routemodelv2/sample_route_step4.csv"
Ren Jie Zheng,2023-01-25T15:28:19.610-0800,2023-02-21T18:10:19.652-0800,20961,https://uwmidsun.atlassian.net/rest/api/2/issue/20961,STRAT15-127,20808,Done,Subtask,3,Automate Ranking,"Write a script that automates the process involving:

* Reading and receiving raw, CSV files for each loop.
* Converting them into their “converted forms” (leverage existing function for this)
* Place converted CSV into /converted in the repository.
* From each converted row, append the rows from each to form a singular CSV file."
,2023-01-23T07:20:31.761-0800,2023-01-23T07:24:22.500-0800,20945,https://uwmidsun.atlassian.net/rest/api/2/issue/20945,STRAT15-126,20907,To Do,Subtask,2,Speed Optimization Class,Based on the historic weather data and the speed optimization algorithm. Create a speed optimization class to precompute the ideal speed for the MSXV car along the race route.
,2023-01-23T07:17:18.850-0800,2023-01-23T07:20:07.221-0800,20944,https://uwmidsun.atlassian.net/rest/api/2/issue/20944,STRAT15-125,20907,To Do,Subtask,2,Gather Historic Weather Data,"Based on the parameters needed to determine the ideal car speed, write a class that can compile a CSV of relevant historic weather data.

As a part of this, you may have to look into online databases and/or Weather APIs that provide historic weather data."
,2023-01-23T07:12:19.347-0800,2023-01-23T07:16:43.706-0800,20943,https://uwmidsun.atlassian.net/rest/api/2/issue/20943,STRAT15-124,20907,To Do,Subtask,2,[SPIKE] Research Ideal Speed Algorithms,"There are different ideas on the internet as to how a solar race car should determine its speed for a given route segment. These are often based on parameters such as elevation, solar irradiance, cloud coverage, etc.



Determine an algorithm that will allow MSXV to determine its car speed over a segment (let’s say 5km interval) of the route. "
Prabhav Khera,2023-01-21T11:15:12.517-0800,2023-03-17T17:25:46.965-0700,20938,https://uwmidsun.atlassian.net/rest/api/2/issue/20938,STRAT15-123,20879,In Progress,Story,4,Coloumb Counting,"Study the existing code and try to replicate the functionality of building coulumb counting with the added functionality of automating the process of tracking and storing the values for charge as the battery is charged and discharged and automatically store value of State Of Charge in the database (ideally, right now in a csv)



[https://uwmidsun.atlassian.net/l/cp/A2sbf018|https://uwmidsun.atlassian.net/l/cp/A2sbf018|smart-link] "
,2023-01-15T16:36:13.302-0800,2023-02-23T20:10:56.730-0800,20927,https://uwmidsun.atlassian.net/rest/api/2/issue/20927,STRAT15-121,20918,In Progress,Subtask,4,Database Tutorials / Confluence Documentation,
,2023-01-15T16:35:44.386-0800,2023-01-15T16:35:44.836-0800,20926,https://uwmidsun.atlassian.net/rest/api/2/issue/20926,STRAT15-120,20918,To Do,Subtask,2,Automation scripts to support database operations,
,2023-01-15T16:34:22.341-0800,2023-01-15T16:34:22.705-0800,20925,https://uwmidsun.atlassian.net/rest/api/2/issue/20925,STRAT15-119,20918,To Do,Subtask,2,Dummy Data Generation / Testing / CI,
,2023-01-15T16:33:13.735-0800,2023-01-15T16:33:14.053-0800,20924,https://uwmidsun.atlassian.net/rest/api/2/issue/20924,STRAT15-118,20918,To Do,Subtask,2,Schema/Table set-up automation,
Ryan Lam,2023-01-15T16:32:56.145-0800,2023-01-16T07:46:06.715-0800,20923,https://uwmidsun.atlassian.net/rest/api/2/issue/20923,STRAT15-117,20918,Done,Subtask,3,Database Start / Stop set-up,
,2023-01-15T16:32:34.919-0800,2023-01-28T10:55:21.220-0800,20922,https://uwmidsun.atlassian.net/rest/api/2/issue/20922,STRAT15-116,20918,Done,Subtask,3,Schema Definitions,"Requires planning meeting to initialize.



[https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3214999553/Database+Schema+Planning|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3214999553/Database+Schema+Planning|smart-link] "
Ryan Lam,2023-01-15T16:31:49.540-0800,2023-04-07T19:46:37.336-0700,20921,https://uwmidsun.atlassian.net/rest/api/2/issue/20921,STRAT15-115,20918,Done,Subtask,3,Docker set-up,"Docker set-up for Windows and MacOS.

Create a Confluence page in our Database directory with instructions to set-up development environment with coverage on database set-up with Docker.  "
,2023-01-15T16:30:55.843-0800,2023-02-20T18:07:55.576-0800,20918,https://uwmidsun.atlassian.net/rest/api/2/issue/20918,STRAT15-112,20780,In Progress,Story,4,Infrastructure,
Vinayak Bector,2022-11-28T20:46:47.202-0800,2023-03-24T18:31:35.805-0700,20914,https://uwmidsun.atlassian.net/rest/api/2/issue/20914,STRAT15-111,20678,In Progress,Story,4,[SPIKE]: Understand the optimization logic in old repository,"[~accountid:6303709355894b7fbddc5c5f] [~accountid:612f6aa26a4c09006aa5716d] 

Check out this repository [https://github.com/uw-midsun/strategy|https://github.com/uw-midsun/strategy|smart-link] 

In this there is an optimization project with the {{optimizer.py}} file and some supporting csv containing elevation data. They are also using some functions from dynamics code. 



Explore that and understand what the objective function is that they are trying to optimize in the {{optimizer.py}} script in math terms. 



Also try and explore what are the different parameters and suggest a good way to add Weather data, State of Charge, and Solar data to this calculation (don’t worry about too many variables, just pick something like temperature, SoC, Humidity, Solar radiance (or whatever)). "
Rodrigo Tiscareno,2022-11-27T09:35:30.513-0800,2022-11-27T09:35:56.090-0800,20913,https://uwmidsun.atlassian.net/rest/api/2/issue/20913,STRAT15-110,20911,In Progress,Subtask,4,Check Driver Eval Metrics,Checking with team over driver statistics.
Yaser Nossibeh,2022-11-27T09:28:26.076-0800,2023-01-21T14:36:17.917-0800,20912,https://uwmidsun.atlassian.net/rest/api/2/issue/20912,STRAT15-109,20911,In Progress,Subtask,4,SPIKE: Processing and Graphing Driver Data,"Create a library to process generated CSV data into visual graphs (library of choice). 

# Generate randomized CSV with driver:
## Name
## Average Velocity 
## Emergency Preparedness Score
## Enjoyment Score
## Power Expenditure
### Estimate - use kinetic energy or appropriate estimation methods on route
## Total time elapsed
## Percentage of time following recommended speed
## Behaviour score (categorical) (“How reckless is the driver”)
## Add additional fields as see fit. 
# Graph.



Next steps would be a total build-out of application UI."
Yaser Nossibeh,2022-11-27T09:27:22.241-0800,2023-02-20T18:07:55.581-0800,20911,https://uwmidsun.atlassian.net/rest/api/2/issue/20911,STRAT15-108,20682,In Progress,Story,4,Driver Profiling,"Evaluating driver performance based on battery efficiency, velocity, and behaviour. 

Objective is to build an application to support visual, interactive, and customizable driver evaluation for future projects."
Stephanie Li,2022-11-27T08:30:22.936-0800,2023-05-14T10:39:45.803-0700,20910,https://uwmidsun.atlassian.net/rest/api/2/issue/20910,STRAT15-107,20677,Done,Story,3,Dashboard Alternatives Research,"Compile a report of dashboard options that are compatible with Python and/or Javascript

Information on dashboard alternatives could include:

* Name
* Open-source (if paid, how much $)
* Does it require a wireless connection?
* Real-time support for data entry
* Strengths
* Pain-points
* Limitations
* Language (Python or Javascript compatible) 
* Connection Details (connection requirements, cloud-based etc.) (boolean of whether the software can receive data from a database directly (MySQL))
* Any other additional details you think may be good to include!

Please compile the report on the Confluence page under the Dashboard Project Overview. Follow-up steps may be pitching the database, implementation etc."
Ziven Rokhit,2022-11-27T07:49:26.436-0800,2023-02-23T10:06:04.367-0800,20909,https://uwmidsun.atlassian.net/rest/api/2/issue/20909,STRAT15-106,20870,In Progress,Story,4,MSXIV Aux Loss Investigation and Migration,"Test and migrate MSXIV Auxiliary / Power budget code from [https://github.com/uw-midsun/strategy/tree/master/auxloss|https://github.com/uw-midsun/strategy/tree/master/auxloss|smart-link]. 



Primarily, we want to:

# Evaluate and test [aux_power_consumption.py|https://github.com/uw-midsun/strategy/blob/master/auxloss/aux_power_consumption.py], and [auxsystem.py|https://github.com/uw-midsun/strategy/blob/master/auxloss/auxsystem.py]. Leverage the _tests_ folder to test each function or create tests to verify functionality.
# Outline the objective and purpose of each script and function (create new pages in Confluence Hardware Power Budget Overview >   MSXIV Code Audit. 
# BONUS: Create a aux_visualizations.py script → series of visuals describing the main drivers of power draw and correlations between voltage, current versus the power."
Jason D'Souza,2022-11-25T07:41:23.884-0800,2023-03-08T09:46:34.140-0800,20908,https://uwmidsun.atlassian.net/rest/api/2/issue/20908,STRAT15-105,20679,In Progress,Story,4,Route Model Graphics,
Kenneth Ruan,2022-11-24T18:55:30.047-0800,2023-05-13T11:26:02.089-0700,20907,https://uwmidsun.atlassian.net/rest/api/2/issue/20907,STRAT15-104,20679,To Do,Story,2,Predict Expected Time of Arrival [MIGRATION],"Given the velocity of a car for each segment in the route, calculate the expected time of arrival of the car.

*Resources*

[https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3179413512/Car+Dynamics+Overview|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3179413512/Car+Dynamics+Overview|smart-link]

*Steps*

# Make an example csv of the the velocities for each coordinate - existing route model classes may be helpful to get coordinates, and then velocities can be added in for now as sample data.
# Write a function to calculate the expected time of arrival.
# Use pytest to test the function.
# Push to github in branch for review - linking to this ticket."
Kenneth Ruan,2022-11-12T11:26:54.546-0800,2023-01-15T16:44:25.538-0800,20896,https://uwmidsun.atlassian.net/rest/api/2/issue/20896,STRAT15-102,20839,Done,Subtask,3,SPIKE: WeatherRacer Class for Weather API calls,"We want to simulate a race and gathering weather data on the fly. We are focusing on the temperature, windspeed, wind direction, humidity, cloudcover, and wind direction.

Build a class that schedules and manages the frequency and duration of API calls for these fields. We will use a fixed lat, long coordinate of your choice for now - but we will look to have this as a dynamic field in the future. The goal is to facilitate "
Kevin Lau,2022-11-05T11:24:07.491-0700,2023-02-20T18:07:55.066-0800,20890,https://uwmidsun.atlassian.net/rest/api/2/issue/20890,STRAT15-99,20880,In-Review,Story,4,[SPIKE]: Explore the receiving function scripts,"We have some receiver function scripts that take the data from CAN bus and decrypt them to the data we want. 

*Explore:*

* What the receiver functions really do and what kind of inputs do we need?
* How are we going to get the inputs - probably ask Sahil and Jarvis from Firmware?
* What kind of data model we can build to store stuff in the database?

*Demo:*

Build a sample csv file with all of the data stored from CAN. Based on that we can decide how we want to create the tables in the central database. 

[https://github.com/uw-midsun/sunstream/tree/main/recv_functions|https://github.com/uw-midsun/sunstream/tree/main/recv_functions|smart-link]

[https://uwmidsun.atlassian.net/wiki/spaces/ELEC/pages/3157950471/Meeting+Notes+-+Strategy+x+FW|https://uwmidsun.atlassian.net/wiki/spaces/ELEC/pages/3157950471/Meeting+Notes+-+Strategy+x+FW|smart-link]"
Anh Mai Que,2022-11-05T11:20:43.143-0700,2023-01-28T15:17:15.030-0800,20889,https://uwmidsun.atlassian.net/rest/api/2/issue/20889,STRAT15-98,20888,In Progress,Subtask,4,Solar Day Class,"Refine the current Solar Day class [https://github.com/uw-midsun/strategy_xv/blob/main/optimization/new_solar.py|https://github.com/uw-midsun/strategy_xv/blob/main/optimization/new_solar.py|smart-link]to mimic real-time changes to lat, longs. We want to calculate the *angle* at which the rays are hitting the flat cells over a period of time. This will then translate into the intensity of the suns rays which will allow for deciphering of how much energy the car is receiving.

As a next step, we want to measure total energy changes over time interval and different locations.

*Recommended Steps*

# Create dummy data for location changes (lat, long) in real-time over a specific time interval.
# Run a small simulation that would mimic how the current Solar Day class would handle different lat longs across a time interval.
# Calculate the angle that the sun rays are directly hitting the cells across time. (maybe create a CSV of angle changes across lat, long, and time differences)
# Research Item: What is the correlation of angle of approach vs intensity? Does the angle of approach of the sun’s rays affect the intensity and therefore the total energy received from the sun?
# With this information in mind, translate the angle changes of the car to the sun into total energy changes over time. 
# Make the lat, long, and time changes dynamic - can we set lat, long, and times and receive the same simulation results?

As an MVP, let’s focus on the “directness” angle of the solar rays to the car’s arrays. Assume the solar arrays are laid out flat in the car.

I.E.

# Angle of Approach for a Fixed Lat Long over a set time-interval
## Considering the Earth’s nature 
# Correlation of the angle to intensity and then to energy input
# Expand model to include multiple lat longs over a time-interval
# Make csv - able"
Anh Mai Que,2022-11-05T11:11:15.221-0700,2023-02-20T18:07:55.065-0800,20888,https://uwmidsun.atlassian.net/rest/api/2/issue/20888,STRAT15-97,20879,In Progress,Story,4,Sunny Day,
Alicia Bremer,2022-11-05T11:07:51.644-0700,2023-01-28T11:17:39.518-0800,20886,https://uwmidsun.atlassian.net/rest/api/2/issue/20886,STRAT15-95,20885,In-Review,Subtask,4,Car Class,"Explore previously done work related to Dynamics and the Car Class module. Expand on the code, eliminate redundancies and migrate code to new code base once refined. 



Resources: 

[https://github.com/uw-midsun/strategy/blob/master/dynamics/car_model.py|https://github.com/uw-midsun/strategy/blob/master/dynamics/car_model.py|smart-link]

[https://uwmidsun.atlassian.net/wiki/spaces/S/pages/2960031773/Dynamics+Model+2019|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/2960031773/Dynamics+Model+2019|smart-link]"
,2022-11-05T11:07:28.582-0700,2023-01-16T07:42:48.361-0800,20885,https://uwmidsun.atlassian.net/rest/api/2/issue/20885,STRAT15-94,,To Do,Story,2,Car Class,
Kevin Lau,2022-10-31T16:48:22.832-0700,2023-05-14T10:59:36.479-0700,20882,https://uwmidsun.atlassian.net/rest/api/2/issue/20882,STRAT15-91,20880,In Progress,Story,4,Storing data from CAN in DB,"*Procedure:*

Go through the sunstream repository and use the receiver functions to decode the data provided by the CAN. Then store the data in the provided database. 

*Resources:*

[https://github.com/uw-midsun/sunstream|https://github.com/uw-midsun/sunstream|smart-link]

[https://uwmidsun.atlassian.net/wiki/spaces/ELEC/pages/3157950471/Meeting+Notes+-+Strategy+x+FW|https://uwmidsun.atlassian.net/wiki/spaces/ELEC/pages/3157950471/Meeting+Notes+-+Strategy+x+FW|smart-link]"
Prabhav Khera,2022-10-29T11:17:34.181-0700,2023-01-16T07:48:28.011-0800,20880,https://uwmidsun.atlassian.net/rest/api/2/issue/20880,STRAT15-89,,In Progress,Epic,4,Sunstream Team,
,2022-10-29T11:17:29.756-0700,2023-01-16T07:46:49.346-0800,20879,https://uwmidsun.atlassian.net/rest/api/2/issue/20879,STRAT15-88,,To Do,Epic,2,Sun Power Team,[https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3176202241/SunPower+Tee-Up|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3176202241/SunPower+Tee-Up]
,2022-10-29T08:45:04.407-0700,2023-05-13T11:23:22.894-0700,20877,https://uwmidsun.atlassian.net/rest/api/2/issue/20877,STRAT15-86,20679,To Do,Story,2,Weather data to wind vector,"Migrate the code from the old repository for calculating and then plotting the wind and car vectors and getting the projection of the wind vector onto the car vector.

*Additional Steps*

* Determine what wind data is obtained from the new Weather API

[https://github.com/uw-midsun/strategy/blob/master/dynamics/wind_model.py|https://github.com/uw-midsun/strategy/blob/master/dynamics/wind_model.py|smart-link]"
,2022-10-22T11:21:07.968-0700,2022-10-22T11:21:08.239-0700,20873,https://uwmidsun.atlassian.net/rest/api/2/issue/20873,STRAT15-84,20871,To Do,Subtask,2,Auxiliary Power Budget Migration ,
Rodrigo Tiscareno,2022-10-22T11:20:04.587-0700,2022-10-29T11:20:22.018-0700,20872,https://uwmidsun.atlassian.net/rest/api/2/issue/20872,STRAT15-83,20871,In Progress,Subtask,4,Power Budget Update CSV,"*Requirements*

* Verify with hardware if there have been changes to the power budget. If so, obtain a new CSV file 
* Update the current CSV file in the repository with the new one"
,2022-10-22T11:18:44.381-0700,2023-05-14T10:38:17.198-0700,20871,https://uwmidsun.atlassian.net/rest/api/2/issue/20871,STRAT15-82,20870,To Do,Story,2,Power Budget Investigation,The auxiliary losses model relies on a power budget supplied by hardware on the power consumption of their various boards. 
Rodrigo Tiscareno,2022-10-22T11:16:51.141-0700,2022-11-19T21:45:32.435-0800,20870,https://uwmidsun.atlassian.net/rest/api/2/issue/20870,STRAT15-81,,To Do,Epic,2,Hardware Power Budget,
,2022-10-22T09:33:50.352-0700,2022-10-22T09:40:00.531-0700,20868,https://uwmidsun.atlassian.net/rest/api/2/issue/20868,STRAT15-80,20818,To Do,Subtask,2,Calculate Binary Score of whether To Take a Loop,"Using the simulation of taking the loop, calculate the binary score of whether to take the loop following the same principles as the benefit cost score, except also taking into account the state at the end of the loop. Specifically, charge at the end of the loop and placement relative to other teams at the end of the loop.

Loops can be taken multiple times - so this binary score can be calculated after each loop."
,2022-10-22T09:33:03.066-0700,2022-10-22T09:38:11.451-0700,20867,https://uwmidsun.atlassian.net/rest/api/2/issue/20867,STRAT15-79,20818,To Do,Subtask,2,Write Step Function to Simulate the Loop,"Simulate a car taking a loop, following the algorithm described below.

[https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3164504106/Live+Loops+Algorithm|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3164504106/Live+Loops+Algorithm|smart-link]

For now, a placeholder car model can be used when taking each step - assume this includes the car’s max velocity, energy used for the step.

Optimize over all variables [ideally]."
Kenneth Ruan,2022-09-27T16:30:15.457-0700,2022-11-12T11:00:29.934-0800,20841,https://uwmidsun.atlassian.net/rest/api/2/issue/20841,STRAT15-65,20839,Done,Subtask,3,Data Ingestion,"Create a function that hits the API and gathers data on the weather for the day, for the upcoming week, and for the general month (if feasible).

ALSO, investigate and test the following repository. Test and migrate any code that may be relevant 🙂 



[https://github.com/uw-midsun/strategy/tree/master/routemodel/data_retrieval|https://github.com/uw-midsun/strategy/tree/master/routemodel/data_retrieval|smart-link]"
Kenneth Ruan,2022-09-27T16:23:57.415-0700,2022-11-01T08:39:30.180-0700,20840,https://uwmidsun.atlassian.net/rest/api/2/issue/20840,STRAT15-64,20839,Done,Subtask,3,SPIKE: Research Weather API's - Investigate Data Source,"Investigate possible Weather API’s to use as a data source. 

Evaluate the type of data received to formulate a schema based on the API data. This should be described in a separate document (could be a Confluence page under the “Weather Model” Space. "
Kenneth Ruan,2022-09-27T16:22:54.480-0700,2023-01-15T16:44:28.377-0800,20839,https://uwmidsun.atlassian.net/rest/api/2/issue/20839,STRAT15-63,20678,Done,Story,3,Weather  Model,
Anh Mai Que,2022-09-24T10:51:27.285-0700,2022-10-29T11:19:28.604-0700,20832,https://uwmidsun.atlassian.net/rest/api/2/issue/20832,STRAT15-62,20678,Done,Story,3,Solar Model,
,2022-09-17T08:58:08.828-0700,2022-11-20T01:14:26.157-0800,20824,https://uwmidsun.atlassian.net/rest/api/2/issue/20824,STRAT15-57,20822,To Do,Subtask,2,Creating the SOC model,"*Context:*

A model is needed in order to understand how SOC is used. To build this model, we first need to be familiar with what features affect the State of Charge. Then we need to create a model for SOC.

*Steps:*

* Define a function that will return current SOC, SOC drain for a given action → eg. drive z meters from coordinate x1, y1 to coordinate x2, y2 at a given speed
** Route Model might be relevant for slope (physical characteristics of how far to move car, force needed for that action)
** Estimate energy usage from aux loss → mock as some constant W / time"
Ryan Lam,2022-09-17T08:42:54.756-0700,2022-12-02T14:35:02.924-0800,20823,https://uwmidsun.atlassian.net/rest/api/2/issue/20823,STRAT15-56,20822,Done,Subtask,3,Research State Of Charge,"*Context:*

State of Charge (SOC) is a key feature of the optimization model and requires thorough understanding to use it in the model. The main goal of this task is to collect information regarding what it is and how we can model it. 

*Steps:*

For our SOC project, we need to understand what it is and how we can measure it. 

Find its definition and collect information. Good sources could be the *Battery - Related planning* page on [Confluence|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3170566152/Battery-Related+Planning] or the old *GitHub* [repository|https://github.com/uw-midsun/strategy]. 

We want information about the code we have for Coulomb Counting and related methods of measuring State of Charge, that we can reuse. 

Also we want to explore the constraints we have for using other methods that are mentioned in the Battery- Related Planning (like Adaptive and Hybrid) and would it be possible for us to use them?

Create a folder in our [new|https://github.com/uw-midsun/strategy_xv] repository and add this information in the README and create a confluence document as well to update us. "
,2022-09-17T08:41:09.741-0700,2023-05-14T11:23:35.244-0700,20822,https://uwmidsun.atlassian.net/rest/api/2/issue/20822,STRAT15-55,20879,In Progress,Story,4,State of Charge (SOC) Research [PAUSED],
,2022-09-13T17:39:34.692-0700,2023-05-13T11:23:44.672-0700,20819,https://uwmidsun.atlassian.net/rest/api/2/issue/20819,STRAT15-52,20818,To Do,Subtask,2,Quantifying Inputs,"Based on the inputs in the [Live Loop Decision Model|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3144712205/Live+Loop+Decision+Model] page, determine:

* How to assign a numeric value/category to these
* How this quantification inputs the formula
* How to get these inputs (if applicable - see route api tickets for which api’s were used by previous strategy models)

And then add these to the confluence\!"
,2022-09-13T17:39:24.601-0700,2023-05-13T11:23:28.812-0700,20818,https://uwmidsun.atlassian.net/rest/api/2/issue/20818,STRAT15-51,20679,To Do,Story,2,Live Loop Decision Model [NEXT TERM],
Vinayak Bector,2022-09-13T17:27:24.061-0700,2023-02-20T18:04:16.214-0800,20812,https://uwmidsun.atlassian.net/rest/api/2/issue/20812,STRAT15-45,20808,Done,Subtask,3,Write Program To Calculate Benefit Cost Score,"Given the following information:

* Cumulative Distance(Miles)
* Major turns
* Number of stops
* Level 1 Turns (Easy)
* Level 2 turns (Medium)
* Level 3 Turns (Hard)
* Average Speed
* Estimated Completion Time
* Current Status

Write a program to calculate the benefit cost score based on the details mentioned in the benefit cost score page.

Experiment with different weights for the data and methods if possible to determine the best possible formula. This can go in the confluence!

*Suggested Formula:* 
Loss = Time + (Weighted average of turns) + Number of stops
Use softmax to get the value for loss between 0 and 1.
Then find score = Distance/Softmax(Loss)

*Resources*

[Benefit Cost Score Page|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3144581153/Benefit+Cost+Score]

[The routebook|https://www.americansolarchallenge.org/ASC/wp-content/uploads/2021/07/ASC-2021-Route-Book.pdf]

*Steps*

# Write a function to calculate the cost benefit score.
# Use pytest to test the code.
# Document the formula used to process the inputs (and why).
# Push to github in branch for review."
Kevin Chen,2022-09-13T17:21:34.585-0700,2023-05-13T11:20:23.667-0700,20811,https://uwmidsun.atlassian.net/rest/api/2/issue/20811,STRAT15-44,20679,In Progress,Task,4,Write Function To Take and Process Routebook Information,"Given the information in the routebook (as an excel file), create a new excel file that includes:

* Cumulative Distance(Miles)
* Major turns
* Number of stops
* Level 1 Turns (Easy)
* Level 2 turns (Medium)
* Level 3 Turns (Hard)
* Average Speed
* Estimated Completion Time
* Current Status

*Resources*

[Benefit Cost Score Page |https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3144581153/Benefit+Cost+Score]

[The routebook|https://www.americansolarchallenge.org/ASC/wp-content/uploads/2021/07/ASC-2021-Route-Book.pdf]

*Steps*

# Make an example excel file from routebook information.
# Read in file as csv using pandas.
# Create new pandas table with information above (calculated).
# Use pytest to test the code.
# Push to github in branch for review."
Prabhav Khera,2022-09-13T16:55:05.711-0700,2023-05-13T11:20:07.070-0700,20808,https://uwmidsun.atlassian.net/rest/api/2/issue/20808,STRAT15-41,20679,In Progress,Story,4,Benefit Cost Score,"More about this story: 

[Details|https://uwmidsun.atlassian.net/wiki/spaces/S/pages/3144581153/Benefit+Cost+Score]"
Prabhav Khera,2022-07-07T17:03:31.413-0700,2022-11-01T08:39:18.389-0700,20795,https://uwmidsun.atlassian.net/rest/api/2/issue/20795,STRAT15-36,20765,To Do,Subtask,2,Determine how to put in our inputs into the SciPy method,"Need to boil down these inputs into something that can be put in as a parameter to the chosen SciPy method.

Inputs:

* Route model
** Route
*** Latitude, longitude, written directions/turns – stops, distance from last turn/direction, total distance
** Elevations,
*** Lat, long, elevation 
** Speed Limits,  
*** Lat, long, speed-limit
* Weather
** Solar
* Car
** Weight 
** Drag Coefficient 
** Solar Array orientation (add later)
** Battery 
*** Battery stuff 
*** Auxiliary losses 
** Motor
*** Motor efficiency

Prepare a small demonstration for the group for possible implementations. "
